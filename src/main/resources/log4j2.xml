<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出 -->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数 -->

<configuration status="WARN" monitorInterval="10">

	<Properties>
		<Property name="LOG_HOME">./logs</Property>
		<Property name="MODLUE_NAME">videoframe</Property>
		<Property name="INFO_FILE_NAME">${MODLUE_NAME}_info.log</Property>
		<Property name="INFO_ARCHIVE_NAME">${MODLUE_NAME}_info_%d{yyyyMMdd}.log
		</Property>
		<Property name="ERROR_FILE_NAME">${MODLUE_NAME}_error.log</Property>
		<Property name="ERROR_ARCHIVE_NAME">${MODLUE_NAME}_error_%d{yyyyMMdd}.log
		</Property>
		<property name="BUFFER_SIZE">524288</property>
		<property name="ROLLING_INTERVAL">1</property>
		<!-- 日志代码是区分各业务模块不同日志类型的唯一标识，由服务代码+日志类型代码2部分，共4位字符构成。合作管理服务：A9 ，日志类型代码统一填00 -->
		<property name="LOG_CODE">A8001</property>

		<!-- 获取jvm 启动参数，日志级别，es输出地址和端口 -->
		<property name="LOG_LEVEL">${sys:LOG_LEVEL:-info}</property>
		<property name="LOGSTASH_IP">${sys:LOGSTASH_IP:-10.1.4.52}</property>
		<property name="LOGSTASH_PORT">${sys:LOGSTASH_PORT:-12201}</property>
	</Properties>
	<!--先定义所有的appender -->
	<appenders>
		<!--这个输出控制台的配置 -->
		<console name="Console" target="SYSTEM_OUT">
			<!--输出日志的格式 -->
			<PatternLayout pattern="${sys:log_prefix:-}%d{yyyyMMddHHmmssSSS}|${LOG_CODE}|%-level|%t|%c[%L]|%msg%n" />
			<Filters>
				<ThresholdFilter level="debug" onMatch="ACCEPT"
					onMismatch="DENY" />
			</Filters>
		</console>
		<RollingRandomAccessFile name="RollingFileInfo"
			fileName="${LOG_HOME}/${INFO_FILE_NAME}" filePattern="${LOG_HOME}/${INFO_ARCHIVE_NAME}"
			immediateFlush="true" bufferSize="${BUFFER_SIZE}" append="true">

			<PatternLayout>
				<pattern>${sys:log_prefix:-}%d{yyyyMMddHHmmssSSS}|${LOG_CODE}|%-level|%t|%c[%L]|%msg%n</pattern>
			</PatternLayout>
			<Policies>
				<TimeBasedTriggeringPolicy interval="${ROLLING_INTERVAL}"
					modulate="true" />
			</Policies>
			<!-- 只记录info和warn级别信息 -->
			<Filters>
				<!-- DENY 不容许error级别以上写入该文件 NEUTRAL 中立， 上下两个条件组合，取中间值 -->
				<!-- <ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"
					/> -->
				<ThresholdFilter level="info" onMatch="ACCEPT"
					onMismatch="DENY" />
			</Filters>

		</RollingRandomAccessFile>

		<!--immediateFlush 是否立即写入， bufferSize 缓存大小 -->
		<RollingRandomAccessFile name="RollingFileError"
			fileName="${LOG_HOME}/${ERROR_FILE_NAME}" filePattern="${LOG_HOME}/${ERROR_ARCHIVE_NAME}"
			immediateFlush="true" bufferSize="${BUFFER_SIZE}" append="true">

			<PatternLayout>
				<pattern>${sys:log_prefix:-}%d{yyyyMMddHHmmssSSS}|${LOG_CODE}|%-level|%t|%c|%msg%n</pattern>
			</PatternLayout>
			<Policies>
				<TimeBasedTriggeringPolicy interval="${ROLLING_INTERVAL}"
					modulate="true" />
			</Policies>
			<!-- 只记录error以上级别信息 -->
			<Filters>
				<ThresholdFilter level="error" onMatch="ACCEPT"
					onMismatch="DENY" />
			</Filters>
		</RollingRandomAccessFile>

	</appenders>

	<!--然后定义logger，只有定义了logger并引入的appender，appender才会生效 -->

	<loggers>
		<!--过滤掉spring和mybatis的一些无用的DEBUG信息 -->
		<logger name="org.mybatis" level="error"></logger>
		<logger name="com.example" level="error"></logger>
         <logger name="org.springframework" level="info"></logger>
		<root level="${LOG_LEVEL}">
			<appender-ref ref="Console" />
			<appender-ref ref="RollingFileInfo" />
			<appender-ref ref="RollingFileError" />
		</root>
	</loggers>
</configuration>